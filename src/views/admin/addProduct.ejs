<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title><%= editProduct ? 'Edit Product' : 'Add Product' %></title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link rel="stylesheet" href="/styles/admin.css" />
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet" />
  <style>
    :root {
      --bg-color: #0E0E0E;
      --card-color: #1C1C1C;
      --accent-color: #DC2040;
      --text-color: #FFFFFF;
      --text-secondary: #FFFFFFCC;
      --input-bg: #2E2E2E;
      --border-color: #444;
      --error-color: #f44336;
      --success-color: #4CAF50;
      --warning-color: #ff9800;
      --secondary-bg: #141414;
      --disabled-color: #777;
    }

    body {
      background-color: var(--bg-color);
      margin: 0;
      font-family: 'Inter', sans-serif;
      color: var(--text-color);
      padding-bottom: 60px; /* Space for footer */
    }

    .form-container {
      max-width: 550px;
      margin: 2rem auto 1rem auto;
      background: var(--card-color);
      padding: 2rem;
      border-radius: 12px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
    }

    .form-header {
      margin-bottom: 1.5rem;
      border-bottom: 1px solid var(--border-color);
      padding-bottom: 0.5rem;
    }

    .form-header h2 {
      margin-top: 0;
    }
    
    .form-group {
      margin-bottom: 1rem;
    }

    label {
      display: block;
      margin-top: 1rem;
      font-weight: 500;
      color: var(--text-secondary);
      margin-bottom: 0.25rem;
    }

    input,
    textarea,
    select {
      width: 100%;
      padding: 0.6rem;
      margin-top: 0.25rem;
      background-color: var(--input-bg);
      border: 1px solid var(--border-color);
      color: var(--text-color);
      border-radius: 5px;
      font-size: 1rem;
      transition: border-color 0.3s;
    }

    input:focus,
    textarea:focus,
    select:focus {
      outline: none;
      border-color: var(--accent-color);
      box-shadow: 0 0 0 2px rgba(220, 32, 64, 0.2);
    }

    .image-preview {
      display: flex;
      flex-wrap: wrap;
      margin-top: 0.5rem;
      gap: 0.5rem;
    }

    .image-preview img {
      width: 80px;
      height: 80px;
      object-fit: cover;
      border-radius: 4px;
    }

    button {
      margin-top: 1.5rem;
      padding: 0.7rem;
      background: var(--accent-color);
      color: #fff;
      border: none;
      border-radius: 5px;
      width: 100%;
      font-size: 1rem;
      font-weight: 600;
      cursor: pointer;
      transition: background 0.3s ease;
    }

    button:hover {
      background: #B71E35;
    }

    button:disabled {
      background: var(--disabled-color);
      cursor: not-allowed;
    }

    .button-secondary {
      background: var(--input-bg);
      color: var(--text-color);
    }

    .button-secondary:hover {
      background: #3a3a3a;
    }

    .msg {
      text-align: center;
      margin-top: 1rem;
      padding: 0.5rem;
      border-radius: 5px;
    }

    .error {
      background-color: rgba(244, 67, 54, 0.1);
      color: var(--error-color);
    }

    .success {
      background-color: rgba(76, 175, 80, 0.1);
      color: var(--success-color);
    }

    .form-helper {
      color: var(--text-secondary);
      font-size: 0.85rem;
      margin-top: 0.25rem;
    }

    .product-table-container {
      max-width: 1100px;
      margin: 2rem auto 5rem auto;
      background: var(--card-color);
      border-radius: 12px;
      padding: 1.5rem;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
      overflow-x: auto;
    }

    .table-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1rem;
    }

    .table-header h3 {
      margin: 0;
    }

    .search-box {
      display: flex;
      align-items: center;
      background: var(--input-bg);
      border-radius: 5px;
      padding: 0.3rem 0.5rem;
      width: 250px;
    }

    .search-box input {
      background: transparent;
      border: none;
      margin-top: 0;
      padding: 0.3rem;
      width: 100%;
    }

    .search-box input:focus {
      box-shadow: none;
    }

    table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 1rem;
    }

    th,
    td {
      border: 1px solid var(--border-color);
      padding: 0.6rem;
      text-align: left;
    }

    th {
      background: var(--accent-color);
      color: #fff;
      font-weight: 600;
    }

    td {
      background: var(--card-color);
    }

    tr:nth-child(even) td {
      background: #2E2E2E;
    }

    tr:hover td {
      background: #333;
    }

    td img {
      max-width: 60px;
      height: 60px;
      object-fit: cover;
      border-radius: 5px;
      margin-right: 4px;
    }

    .stock-status {
      padding: 0.2rem 0.4rem;
      border-radius: 3px;
      font-weight: 500;
      text-align: center;
      display: inline-block;
      min-width: 80px;
    }

    .in-stock {
      background-color: rgba(76, 175, 80, 0.1);
      color: var(--success-color);
    }

    .low-stock {
      background-color: rgba(255, 152, 0, 0.1);
      color: var(--warning-color);
    }

    .out-of-stock {
      background-color: rgba(244, 67, 54, 0.1);
      color: var(--error-color);
    }

    .action-btn {
      background: var(--accent-color);
      color: #fff;
      border: none;
      padding: 0.4rem 0.8rem;
      border-radius: 4px;
      cursor: pointer;
      margin-right: 0.5rem;
      font-size: 0.95rem;
      text-decoration: none;
      transition: background 0.3s;
      display: inline-block;
    }

    .action-btn:hover {
      background: #B71E35;
    }

    .action-btn.delete {
      background: var(--error-color);
    }

    .action-btn.delete:hover {
      background: #c62828;
    }

    .action-btn.view {
      background: var(--secondary-bg);
    }

    .action-btn.view:hover {
      background: #222;
    }

    h2,
    h3 {
      color: var(--text-color);
      text-align: center;
    }

    @media (max-width: 768px) {
      .form-container,
      .product-table-container {
        padding: 1rem;
        margin: 1rem;
        width: auto;
      }

      .table-header {
        flex-direction: column;
        gap: 1rem;
      }

      .search-box {
        width: 100%;
      }

      table,
      th,
      td {
        font-size: 0.9rem;
        padding: 0.4rem;
      }

      td img {
        max-width: 40px;
        height: 40px;
      }
      
      .form-header h2 {
        font-size: 1.5rem;
      }
    }

    footer {
      background: var(--secondary-bg);
      color: #fff;
      text-align: center;
      padding: 1rem 0;
      position: fixed;
      left: 0;
      right: 0;
      bottom: 0;
      width: 100%;
      font-size: 1rem;
      z-index: 100;
      box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.2);
    }

    footer span {
      color: var(--accent-color);
    }
    
    .pagination {
      display: flex;
      justify-content: center;
      margin-top: 1.5rem;
      gap: 0.5rem;
    }
    
    .pagination-btn {
      background: var(--input-bg);
      color: var(--text-color);
      border: 1px solid var(--border-color);
      padding: 0.4rem 0.8rem;
      border-radius: 4px;
      cursor: pointer;
      transition: all 0.3s;
    }
    
    .pagination-btn:hover {
      background: var(--accent-color);
      color: white;
    }
    
    .pagination-btn.active {
      background: var(--accent-color);
      color: white;
    }
    
    .pagination-btn:disabled {
      background: var(--disabled-color);
      cursor: not-allowed;
    }
  </style>
</head>
<body>
  <%- include('../components/Navbar') %>

  <div class="form-container">
    <div class="form-header">
      <h2><%= editProduct ? 'Edit Product' : 'Add Product' %></h2>
    </div>

    <form
      action="<%= editProduct ? '/admin/products/edit/' + editProduct._id : '/admin/products/add' %>"
      method="POST"
      enctype="multipart/form-data"
      id="productForm"
    >
      <div class="form-group">
        <label for="name">Name</label>
        <input 
          type="text" 
          id="name" 
          name="name" 
          value="<%= editProduct?.name || '' %>" 
          required 
          placeholder="Enter product name"
        />
      </div>

      <div class="form-group">
        <label for="price">Price (₹)</label>
        <input 
          type="number" 
          id="price" 
          name="price" 
          value="<%= editProduct?.price || '' %>" 
          min="0" 
          step="0.01" 
          required 
          placeholder="Enter price"
        />
      </div>

      <div class="form-group">
        <label for="stock">Stock</label>
        <input
          type="number"
          id="stock"
          name="stock"
          min="0"
          value="<%= editProduct?.stock || '0' %>"
          required
          placeholder="Enter available stock"
        />
      </div>

      <div class="form-group">
        <label for="description">Description</label>
        <textarea 
          id="description" 
          name="description" 
          rows="4" 
          required 
          placeholder="Enter product description"
        ><%= editProduct?.description || '' %></textarea>
      </div>

      <div class="form-group">
        <label for="category-select">Category</label>
        <select
          name="category"
          id="category-select"
          required
          onchange="loadSubcategories(this.value)"
        >
          <option value="">Select a Category</option>
          <% categories.forEach((cat) => {
            const selected =
              editProduct &&
              ((editProduct.category?._id?.toString() === cat._id.toString()) ||
                editProduct.category?.toString() === cat._id.toString());
          %>
            <option value="<%= cat._id %>" <%= selected ? 'selected' : '' %>><%= cat.name %></option>
          <% }); %>
        </select>
      </div>

      <div class="form-group">
        <label for="subcategory-select">Subcategory</label>
        <select name="subcategory" id="subcategory-select" required>
          <option value="">Select a category first</option>
        </select>
      </div>

      <div class="form-group">
        <label for="images">Product Images</label>
        <input
          type="file"
          id="images"
          name="images"
          accept="image/*"
          multiple
          <%= editProduct ? '' : 'required' %>
        />
        <div class="form-helper">Upload 2-5 images. Hold Ctrl (Windows) or Command (Mac) to select multiple images.</div>
        
        <% if (editProduct && editProduct.images && editProduct.images.length > 0) { %>
          <div class="form-helper">Current Images:</div>
          <div class="image-preview">
            <% editProduct.images.forEach((img) => { %>
              <img src="<%= img %>" alt="Current product image" />
            <% }); %>
          </div>
          <div class="form-helper">If you upload new images, the current ones will be replaced.</div>
        <% } %>
      </div>

      <button type="submit" id="submitBtn"><%= editProduct ? 'Update Product' : 'Add Product' %></button>
      
      <% if (editProduct) { %>
        <a href="/admin/products" class="button-secondary" style="display: block; text-align: center; margin-top: 1rem; text-decoration: none;">
          Cancel Edit
        </a>
      <% } %>
    </form>

    <% if (error) { %>
      <div class="msg error"><%= error %></div>
    <% } %>
    <% if (success) { %>
      <div class="msg success" id="successPopup"><%= success %></div>
    <% } %>
  </div>

  <div class="product-table-container">
    <div class="table-header">
      <h3>All Products</h3>
      <div class="search-box">
        <input type="text" id="searchInput" placeholder="Search products..." />
      </div>
    </div>
    
    <table id="productTable">
      <thead>
        <tr>
          <th>Name</th>
          <th>Price</th>
          <th>Stock</th>
          <th>Category</th>
          <th>Subcategory</th>
          <th>Images</th>
          <th>Action</th>
        </tr>
      </thead>
      <tbody>
        <% if (products.length > 0) {
          products.forEach((product) => { %>
            <tr>
              <td><%= product.name %></td>
              <td>₹<%= product.price.toLocaleString('en-IN') %></td>
              <td>
                <% if (product.stock === 0) { %>
                  <span class="stock-status out-of-stock">Out of Stock</span>
                <% } else if (product.stock <= 5) { %>
                  <span class="stock-status low-stock">Low Stock (<%= product.stock %>)</span>
                <% } else { %>
                  <span class="stock-status in-stock"><%= product.stock %></span>
                <% } %>
              </td>
              <td><%= product.category?.name || 'N/A' %></td>
              <td><%= product.subcategory?.name || 'N/A' %></td>
              <td>
                <% if (product.images && product.images.length > 0) { %>
                  <div style="display: flex; gap: 4px; flex-wrap: wrap;">
                    <% product.images.slice(0, 2).forEach((img) => { %>
                      <img src="<%= img %>" alt="product-image" />
                    <% }); %>
                    <% if (product.images.length > 2) { %>
                      <span style="display: flex; align-items: center; justify-content: center; color: var(--text-secondary);">
                        +<%= product.images.length - 2 %> more
                      </span>
                    <% } %>
                  </div>
                <% } else { %>
                  <span>No images</span>
                <% } %>
              </td>
              <td>
                <a href="/admin/products/edit/<%= product._id %>" class="action-btn">Edit</a>
                <a href="/admin/productdetails?id=<%= product._id %>" class="action-btn view" target="_blank">View</a>
                <a href="javascript:void(0);" class="action-btn delete"
                   onclick="deleteProduct('<%= product._id %>', this)">
                   Delete
                </a>
              </td>
            </tr>
        <% });
        } else { %>
          <tr>
            <td colspan="7" style="text-align:center;">No products available</td>
          </tr>
        <% } %>
      </tbody>
    </table>
    
    <% if (products.length > 10) { %>
      <div class="pagination" id="pagination">
        <!-- Pagination will be generated by JavaScript -->
      </div>
    <% } %>
  </div>

  <footer>
    &copy; <%= new Date().getFullYear() %> <span>Admin Panel</span> — All Rights Reserved.
  </footer>

  <script>
    async function loadSubcategories(categoryId) {
      const subSelect = document.getElementById('subcategory-select');
      subSelect.innerHTML = '<option value="">Loading...</option>';
      subSelect.disabled = true;

      try {
        const res = await fetch(`/admin/subcategories/${categoryId}`);
        const data = await res.json();

        subSelect.disabled = false;
        subSelect.innerHTML = '<option value="">Select subcategory</option>';

        // For edit mode: preselect the subcategory
        const selectedSub = "<%= editProduct?.subcategory?._id || editProduct?.subcategory || '' %>";

        data.forEach((sub) => {
          const option = document.createElement('option');
          option.value = sub._id;
          option.textContent = sub.name;
          if (selectedSub && selectedSub === sub._id) {
            option.selected = true;
          }
          subSelect.appendChild(option);
        });

        if (data.length === 0) {
          subSelect.innerHTML = '<option value="">No subcategories found</option>';
        }
      } catch (err) {
        subSelect.innerHTML = '<option value="">Error loading subcategories</option>';
        subSelect.disabled = false;
      }
    }

    // On page load, if editing, load subcategories for the selected category
    document.addEventListener('DOMContentLoaded', function() {
      const categorySelect = document.getElementById('category-select');
      if (categorySelect.value) {
        loadSubcategories(categorySelect.value);
      }
    });
    
    // Form validation
    document.getElementById('productForm').addEventListener('submit', function(e) {
      const nameInput = document.getElementById('name');
      const priceInput = document.getElementById('price');
      const stockInput = document.getElementById('stock');
      const descInput = document.getElementById('description');
      const categoryInput = document.getElementById('category-select');
      const subcategoryInput = document.getElementById('subcategory-select');
      const imagesInput = document.getElementById('images');
      
      // Basic validation
      if (!nameInput.value.trim()) {
        e.preventDefault();
        alert('Please enter a product name');
        nameInput.focus();
        return;
      }
      
      if (priceInput.value <= 0) {
        e.preventDefault();
        alert('Price must be greater than 0');
        priceInput.focus();
        return;
      }
      
      if (stockInput.value < 0) {
        e.preventDefault();
        alert('Stock cannot be negative');
        stockInput.focus();
        return;
      }
      
      if (!descInput.value.trim()) {
        e.preventDefault();
        alert('Please enter a product description');
        descInput.focus();
        return;
      }
      
      if (!categoryInput.value) {
        e.preventDefault();
        alert('Please select a category');
        categoryInput.focus();
        return;
      }
      
      if (!subcategoryInput.value) {
        e.preventDefault();
        alert('Please select a subcategory');
        subcategoryInput.focus();
        return;
      }
      
      // Check if it's a new product (required images) or if images are provided for update
      const isEditMode = window.location.href.includes('/edit/');
      
      if (!isEditMode && (!imagesInput.files || imagesInput.files.length < 2)) {
        e.preventDefault();
        alert('Please upload at least 2 images');
        imagesInput.focus();
        return;
      }
      
      if (imagesInput.files && imagesInput.files.length > 5) {
        e.preventDefault();
        alert('You can upload a maximum of 5 images');
        imagesInput.focus();
        return;
      }
    });
    
    // Search functionality
    document.getElementById('searchInput').addEventListener('keyup', function() {
      const searchText = this.value.toLowerCase();
      const table = document.getElementById('productTable');
      const rows = table.getElementsByTagName('tr');
      
      for (let i = 1; i < rows.length; i++) { // Start from 1 to skip header row
        const row = rows[i];
        if (row.cells.length < 2) continue; // Skip if not a product row
        
        const name = row.cells[0].textContent.toLowerCase();
        const category = row.cells[3].textContent.toLowerCase();
        const subcategory = row.cells[4].textContent.toLowerCase();
        
        if (name.includes(searchText) || category.includes(searchText) || subcategory.includes(searchText)) {
          row.style.display = '';
        } else {
          row.style.display = 'none';
        }
      }
    });
    
    // Pagination setup
    function setupPagination() {
      const table = document.getElementById('productTable');
      const paginationContainer = document.getElementById('pagination');
      if (!paginationContainer) return;
      
      const rows = table.querySelectorAll('tbody tr');
      const rowsPerPage = 10;
      const pageCount = Math.ceil(rows.length / rowsPerPage);
      
      if (pageCount <= 1) {
        paginationContainer.style.display = 'none';
        return;
      }
      
      // Create pagination controls
      paginationContainer.innerHTML = '';
      
      // Previous button
      const prevBtn = document.createElement('button');
      prevBtn.className = 'pagination-btn';
      prevBtn.textContent = '←';
      prevBtn.disabled = true;
      paginationContainer.appendChild(prevBtn);
      
      // Page buttons
      for (let i = 1; i <= pageCount; i++) {
        const pageBtn = document.createElement('button');
        pageBtn.className = 'pagination-btn';
        pageBtn.textContent = i;
        if (i === 1) pageBtn.classList.add('active');
        paginationContainer.appendChild(pageBtn);
      }
      
      // Next button
      const nextBtn = document.createElement('button');
      nextBtn.className = 'pagination-btn';
      nextBtn.textContent = '→';
      paginationContainer.appendChild(nextBtn);
      
      // Hide rows beyond first page
      for (let i = rowsPerPage; i < rows.length; i++) {
        rows[i].style.display = 'none';
      }
      
      // Add event listeners
      const pageBtns = paginationContainer.querySelectorAll('.pagination-btn');
      let currentPage = 1;
      
      for (let i = 1; i < pageBtns.length - 1; i++) {
        pageBtns[i].addEventListener('click', function() {
          // Update active button
          pageBtns.forEach(btn => btn.classList.remove('active'));
          this.classList.add('active');
          
          // Get page number
          currentPage = parseInt(this.textContent);
          
          // Show/hide rows
          for (let j = 0; j < rows.length; j++) {
            if (j >= (currentPage - 1) * rowsPerPage && j < currentPage * rowsPerPage) {
              rows[j].style.display = '';
            } else {
              rows[j].style.display = 'none';
            }
          }
          
          // Update prev/next buttons
          prevBtn.disabled = currentPage === 1;
          nextBtn.disabled = currentPage === pageCount;
        });
      }
      
      // Previous button click
      prevBtn.addEventListener('click', function() {
        if (currentPage > 1) {
          currentPage--;
          pageBtns[currentPage].click();
        }
      });
      
      // Next button click
      nextBtn.addEventListener('click', function() {
        if (currentPage < pageCount) {
          currentPage++;
          pageBtns[currentPage].click();
        }
      });
    }
    
    // Setup pagination when page loads
    window.addEventListener('load', setupPagination);
    
    // Execute loadSubcategories if a category is already selected (edit mode)
    document.addEventListener('DOMContentLoaded', function() {
      const categorySelect = document.getElementById('category-select');
      if (categorySelect.value) {
        loadSubcategories(categorySelect.value);
      }
      
      // Auto-hide success message after 5 seconds
      const successMsg = document.querySelector('.msg.success');
      if (successMsg) {
        setTimeout(() => {
          successMsg.style.opacity = '0';
          setTimeout(() => {
            successMsg.style.display = 'none';
          }, 500);
        }, 5000);
      }
    });
    
    document.addEventListener('DOMContentLoaded', function() {
      const successMsg = document.getElementById('successPopup');
      if (successMsg) {
        setTimeout(() => {
          successMsg.style.opacity = '0';
          setTimeout(() => {
            successMsg.style.display = 'none';
          }, 500);
        }, 3000);
      }
    });
    
    // AJAX delete product
    async function deleteProduct(productId, btn) {
      if (!confirm('Are you sure you want to delete this product?')) return;
      try {
        const res = await fetch(`/admin/products/delete/${productId}`, {
          method: 'DELETE'
        });
        const data = await res.json();
        if (data.success) {
          // Remove the row from the table
          const row = btn.closest('tr');
          row.parentNode.removeChild(row);

          // Show popup
          showSuccessPopup('Product deleted successfully!');
        } else {
          alert(data.message || 'Delete failed');
        }
      } catch (err) {
        alert('Server error');
      }
    }

    // Show success popup
    function showSuccessPopup(msg) {
      let popup = document.getElementById('successPopup');
      if (!popup) {
        popup = document.createElement('div');
        popup.className = 'msg success';
        popup.id = 'successPopup';
        document.body.appendChild(popup);
      }
      popup.textContent = msg;
      popup.style.display = 'block';
      popup.style.opacity = '1';
      setTimeout(() => {
        popup.style.opacity = '0';
        setTimeout(() => {
          popup.style.display = 'none';
        }, 500);
      }, 2000);
    }
  </script>
</body>
</html>