<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cart - Plant Store</title>
    <link rel="stylesheet" href="/styles.css">
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f7f7f7;
            margin: 0;
            padding: 0;
            color: #333;
        }

        header {
            background-color: #4CAF50;
            padding: 10px 20px;
            position: fixed;
            width: 100%;
            top: 0;
            z-index: 1000;
        }
        nav {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .nav-links {
            display: flex;
            gap: 20px;
            align-items: center;
        }
        .nav-links a {
            color: #fff;
            text-decoration: none;
            font-weight: 500;
            padding: 5px 10px;
            border-radius: 4px;
            transition: background-color 0.3s;
        }
        .nav-links a:hover {
            background-color: rgba(255, 255, 255, 0.3);
        }
        .search-bar {
            padding: 6px 10px;
            border-radius: 20px;
            border: 1px solid #ddd;
            width: 200px;
            font-size: 1rem;
        }

        .cart-items {
            margin: 80px auto 20px;
            padding: 20px;
            background-color: #ffffff;
            border-radius: 10px;
            width: 90%;
            max-width: 700px;
            text-align: left;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            min-height: 300px;
        }

        .cart-items h2 {
            text-align: center;
            color: #4CAF50;
            font-size: 2rem;
            margin-bottom: 20px;
        }

        .cart-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px 0;
            border-bottom: 1px solid #eee;
            gap: 10px;
        }

        .cart-item:last-child {
            border-bottom: none;
        }

        .cart-item img {
            width: 70px;
            height: 70px;
            border-radius: 10px;
            object-fit: cover;
            margin-right: 10px;
        }

        .cart-item-info {
            flex: 1;
            display: flex;
            flex-direction: column;
            gap: 4px;
        }

        .cart-item-info p {
            margin: 0;
        }

        .quantity-input {
            width: 50px;
            text-align: center;
            background-color: #f8f8f8;
            border: 1px solid #ddd;
            color: #333;
            border-radius: 5px;
            padding: 5px;
        }

        .cart-item-description {
            font-size: 0.9em;
            color: #555;
            margin-top: 5px;
        }

        .remove-btn {
            padding: 8px 14px;
            background-color: #e53935;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s;
            margin-left: 10px;
        }

        .remove-btn:hover {
            background-color: #b71c1c;
        }

        .stock-error {
            color: white;
            background-color: #e53935;
            text-align: center;
            margin: 10px 0;
            padding: 10px;
            border-radius: 5px;
            display: none;
        }

        .total-section {
            background: #f1f8e9;
            border-radius: 10px;
            padding: 18px 20px 14px 20px;
            margin: 30px 0 10px 0;
            box-shadow: 0 1px 4px rgba(76,175,80,0.08);
            font-size: 1.1em;
            max-width: 400px;
            margin-left: auto;
            margin-right: auto;
        }

        .total-section p {
            margin: 8px 0;
            font-size: 1.1em;
            text-align: right;
        }

        .total-section strong {
            font-size: 1.2em;
            color: #388e3c;
        }

        .cart-actions {
            margin-top: 20px;
            display: flex;
            justify-content: space-between;
            max-width: 400px;
            margin-left: auto;
            margin-right: auto;
            gap: 10px;
        }

        .cart-actions button {
            padding: 12px 20px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 1.1em;
            transition: background-color 0.3s;
            flex: 1 1 48%;
        }

        .cart-actions button:hover {
            background-color: #388e3c;
        }

        .three-dots {
            display: none;
            font-size: 2rem;
            color: #fff;
            background: none;
            border: none;
            cursor: pointer;
            margin-left: 16px;
            z-index: 1201;
        }
        .mobile-menu {
            display: none;
            position: fixed;
            top: 0; right: 0;
            width: 80vw; max-width: 320px;
            height: 100vh;
            background: #176b2c;
            color: #fff;
            z-index: 1200;
            box-shadow: -2px 0 16px rgba(0,0,0,0.18);
            padding: 40px 20px 20px 20px;
            transition: right 0.3s cubic-bezier(.4,0,.2,1);
            overflow-y: auto;
            font-family: 'Poppins', Arial, sans-serif;
        }
        .mobile-menu.show {
            display: block;
            right: 0;
        }
        .mobile-menu a {
            display: block;
            color: #e0ffe0;
            text-decoration: none;
            font-size: 1.1rem;
            margin: 18px 0 0 0;
            font-weight: 600;
            letter-spacing: 0.5px;
            border-left: 2px solid #4caf50;
            padding-left: 10px;
            transition: color 0.2s;
        }
        .mobile-menu a:hover {
            color: #4caf50;
        }
        .mobile-menu .close-btn {
            position: absolute;
            top: 18px;
            right: 18px;
            background: none;
            border: none;
            color: #fff;
            font-size: 2rem;
            cursor: pointer;
            z-index: 1202;
        }
        @media (max-width: 900px) {
            .cart-items {
                width: 95%;
            }
            .total-section, .cart-actions {
                max-width: 95%;
            }
        }

        @media (max-width: 600px) {
            .cart-items {
                width: 100%;
                margin: 70px 10px 20px;
                padding: 10px;
                border-radius: 0;
            }
            .cart-item {
                flex-direction: column;
                align-items: flex-start;
                gap: 8px;
                padding: 10px 4px;
            }
            .cart-item img {
                margin: 0 0 8px 0;
            }
            .cart-actions {
                flex-direction: column;
                gap: 8px;
                width: 100%;
            }
            .total-section {
                padding: 12px 8px;
                font-size: 1em;
            }
            .nav-links {
                display: none;
            }
            .search-bar {
                width: 150px;
            }
        }

        @media (max-width: 800px) {
            .nav-links {
                display: none !important;
            }
            .three-dots {
                display: block !important;
            }
        }
    </style>
</head>
<body>
    <%- include('pagecomponent/navbar', { user: user, categories: categories }) %>
  <%- include('pagecomponent/caregorybar', { categories: categories }) %>

    <div class="cart-items">
        <h2>Your Cart</h2>
        <div id="stock-error" class="stock-error"></div>
        <div id="cart-items-container"></div>
        <div class="total-section">
            <p>Subtotal: ₹<span id="subtotal-price">0.00</span></p>
            <p>Delivery: ₹<span id="delivery-charge">79.00</span></p>
            <p><strong>Total: ₹<span id="total-price">0.00</span></strong></p>
        </div>
        <div class="cart-actions">
            <button onclick="proceedToCheckout()">Proceed to Checkout</button>
            <button onclick="emptyCart()">Empty Cart</button>
        </div>
    </div>

    <script>
        window.checkLoginBeforeAction = function (actionCallback) {
  fetch('/check-login')
    .then(res => res.json())
    .then(data => {
      if (data.loggedIn) {
        actionCallback();
      } else {
        if (loginModal) {
          loginModal.style.display = "flex";
          loginModal.setAttribute("aria-hidden", "false");
        }
      }
    })
    .catch(err => console.error('Login check failed:', err));
};

        async function fetchProductStock(productId) {
        try {
            const response = await fetch(`/api/products/product/stock/${productId}`);
            if (!response.ok) throw new Error('Failed to fetch stock');
            const data = await response.json();
            if (typeof data.stock !== 'number' || isNaN(data.stock)) throw new Error('Invalid stock data');
            return data.stock;
        } catch (error) {
            console.error('Error fetching stock:', error);
            showStockError('Failed to fetch stock for some items. Please try again later.');
            return -1;
        }
    }

    function showStockError(msg) {
        const err = document.getElementById('stock-error');
        err.textContent = msg;
        err.style.display = 'block';
        setTimeout(() => {
            err.style.display = 'none';
            err.textContent = '';
        }, 3000);
    }

    function searchProducts(searchTerm) {
        searchTerm = searchTerm.trim().toLowerCase();
        const items = document.querySelectorAll('.cart-item');
        items.forEach(item => {
            const name = item.querySelector('.cart-item-info strong').textContent.toLowerCase();
            item.style.display = name.includes(searchTerm) ? '' : 'none';
        });
    }

    async function loadCart() {
        const cart = JSON.parse(localStorage.getItem('cart')) || [];
        const cartItemsContainer = document.getElementById('cart-items-container');
        let subtotal = 0;
        const deliveryCharge = cart.length ? 79 : 0;

        cartItemsContainer.innerHTML = '';

        if (cart.length === 0) {
            cartItemsContainer.innerHTML = '<p>Your cart is empty.</p>';
            document.getElementById('subtotal-price').textContent = '0.00';
            document.getElementById('delivery-charge').textContent = '0.00';
            document.getElementById('total-price').textContent = '0.00';
        } else {
            for (const item of cart) {
                const latestStock = await fetchProductStock(item.id);
                item.stock = (typeof latestStock === 'number' && latestStock >= 0) ? latestStock : 0;
                item.fetchFailed = latestStock === -1;

                if (item.quantity > item.stock) {
                    item.quantity = item.stock;
                    localStorage.setItem('cart', JSON.stringify(cart));
                    showStockError(`Adjusted quantity for ${item.name} to available stock of ${item.stock}.`);
                }

                subtotal += item.price * item.quantity;

                const cartItem = document.createElement('div');
                cartItem.classList.add('cart-item');

                const fetchFailed = latestStock === -1;
                const outOfStock = !fetchFailed && (item.stock === 0);

                cartItem.innerHTML = `
                    <img src="${item.image || 'https://source.unsplash.com/100x100/?plant'}" alt="${item.name}">
                    <div class="cart-item-info">
                        <p><strong>${item.name}</strong></p>
                        <p>₹${item.price.toFixed(2)}</p>
                        <input type="number" min="1" max="${item.stock}" class="quantity-input" value="${item.quantity}" 
                            onchange="updateQuantity('${item.id}', this.value, ${item.stock})" ${(outOfStock || fetchFailed) ? 'disabled' : ''}>
                        <p style="color:#e53935;font-size:0.95em;">
                            ${fetchFailed ? 'Error fetching stock' : (outOfStock ? 'Out of Stock' : 'Stock: ' + item.stock)}
                        </p>
                    </div>
                    <div class="cart-item-description">
                        <p>${item.description || 'No description available'}</p>
                    </div>
                    <button class="remove-btn" onclick="removeItem('${item.id}')">Remove</button>
                `;

                cartItemsContainer.appendChild(cartItem);
            }

            document.getElementById('subtotal-price').textContent = subtotal.toFixed(2);
            document.getElementById('delivery-charge').textContent = deliveryCharge.toFixed(2);
            document.getElementById('total-price').textContent = (subtotal + deliveryCharge).toFixed(2);
        }
    }

    async function updateQuantity(id, newQuantity, stock) {
        const cart = JSON.parse(localStorage.getItem('cart')) || [];
        const item = cart.find(item => item.id === id);

        if (item) {
            const latestStock = await fetchProductStock(id);
            item.stock = (typeof latestStock === 'number' && latestStock >= 0) ? latestStock : 0;
            stock = item.stock;

            const quantity = Math.max(1, parseInt(newQuantity));
            if (quantity > stock) {
                showStockError(`Cannot exceed available stock of ${stock}!`);
                item.quantity = stock;
            } else {
                item.quantity = quantity;
            }
            localStorage.setItem('cart', JSON.stringify(cart));
            loadCart();
        }
    }

    async function proceedToCheckout() {
        const cart = JSON.parse(localStorage.getItem('cart')) || [];
        if (!cart.length) {
            alert('Your cart is empty. Please add items to your cart before proceeding to checkout.');
            return;
        }
        // Check login before proceeding
        checkLoginBeforeAction(async () => {
            // Recheck stock before checkout
            for (const item of cart) {
                const latestStock = await fetchProductStock(item.id);
                if (typeof latestStock !== 'number' || latestStock < 1 || item.quantity > latestStock) {
                    showStockError(`Cannot proceed: ${item.name} is out of stock or stock unavailable!`);
                    item.stock = latestStock > 0 ? latestStock : 0;
                    item.quantity = Math.min(item.quantity, item.stock);
                    localStorage.setItem('cart', JSON.stringify(cart));
                    loadCart();
                    return;
                }
            }
            window.location.href = '/checkout';
        });
    }

    function removeItem(id) {
        let cart = JSON.parse(localStorage.getItem('cart')) || [];
        cart = cart.filter(item => item.id !== id);
        localStorage.setItem('cart', JSON.stringify(cart));
        loadCart();
    }

    function emptyCart() {
        localStorage.removeItem('cart');
        loadCart();
    }

    function toggleMobileMenu() {
        const menu = document.getElementById('mobileMenu');
        menu.classList.toggle('show');
    }
    // Optional: close menu when clicking outside
    window.addEventListener('click', function(e) {
        const menu = document.getElementById('mobileMenu');
        const dots = document.querySelector('.three-dots');
        if (menu && menu.classList.contains('show') && !menu.contains(e.target) && !dots.contains(e.target)) {
            menu.classList.remove('show');
        }
    });

    loadCart();
</script>
</body>
</html>