<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My Orders</title>
    <style>
        :root {
            --primary-color: #4CAF50;
            --secondary-color: #1976D2;
            --accent-color: #FF9800;
            --text-color: #333;
            --bg-color: #f8f9fa;
            --card-bg: #ffffff;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            color: var(--text-color);
            line-height: 1.6;
            min-height: 100vh;
        }

        .container {
            max-width: 1400px;
            margin: 100px auto 40px;
            padding: 0 15px;
            position: relative;
        }

        h2 {
            color: var(--primary-color);
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: 2rem;
            text-align: center;
            position: sticky;
            top: 0;
            background: var(--bg-color);
            padding: 1rem 0;
            z-index: 10;
            border-radius: 8px;
        }

        .order-container {
            background: var(--card-bg);
            border-radius: 12px;
            padding: 1.5rem;
            margin-bottom: 2rem;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
            animation: fadeIn 0.5s ease-out;
            transition: transform 0.3s ease;
        }

        .order-container:hover {
            transform: translateY(-5px);
        }

        .order-item {
            display: grid;
            grid-template-columns: 120px 1fr auto;
            gap: 1rem;
            padding: 1rem 0;
            border-bottom: 1px solid #eee;
            align-items: center;
        }

        .order-item:last-child {
            border-bottom: none;
        }

        .order-item img {
            width: 100%;
            max-width: 120px;
            height: 120px;
            object-fit: cover;
            border-radius: 8px;
            border: 1px solid #e0e0e0;
            background: #fafafa;
        }

        .order-details {
            text-align: left;
        }

        .product-name {
            font-size: 1.2rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
        }

        .product-price {
            font-size: 1.1rem;
            color: var(--primary-color);
            margin: 0.3rem 0;
        }

        .order-status {
            padding: 0.5rem 1rem;
            border-radius: 20px;
            font-weight: 600;
            background: linear-gradient(45deg, #e8f5e9, #c8e6c9);
            color: var(--primary-color);
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            margin: 0.5rem 0;
        }

        .status-progress {
            margin: 1rem 0;
            background: #f0f0f0;
            border-radius: 4px;
            height: 8px;
            overflow: hidden;
        }

        .status-progress-bar {
            height: 100%;
            background: linear-gradient(90deg, var(--primary-color), var(--accent-color));
            transition: width 0.5s ease;
        }

        .delivery-info {
            background: #f5f5f5;
            padding: 1rem;
            border-radius: 8px;
            margin: 1rem 0;
            font-size: 0.95rem;
        }

        .error-message {
            color: #d32f2f;
            background: #ffeaea;
            padding: 1rem;
            border-radius: 8px;
            margin: 1rem 0;
            text-align: center;
        }

        .total-amount {
            font-size: 1.2rem;
            font-weight: 700;
            text-align: right;
            color: var(--secondary-color);
            margin-top: 1rem;
            padding-top: 1rem;
            border-top: 1px solid #eee;
        }

        .track-button {
            background: var(--accent-color);
            color: white;
            padding: 0.5rem 1rem;
            border: none;
            border-radius: 20px;
            cursor: pointer;
            font-size: 0.9rem;
            font-weight: 600;
            transition: transform 0.2s, box-shadow 0.2s;
        }

        .track-button:hover {
            transform: scale(1.05);
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
        }

        .loader {
            border: 4px solid #f3f3f3;
            border-top: 4px solid var(--primary-color);
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 2rem auto;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        /* Responsive Design */
        @media (max-width: 1024px) {
            .container {
                margin: 80px auto 20px;
                padding: 0 10px;
            }

            .order-item {
                grid-template-columns: 100px 1fr auto;
            }

            .order-item img {
                max-width: 100px;
                height: 100px;
            }

            h2 {
                font-size: 2rem;
            }
        }

        @media (max-width: 768px) {
            .order-item {
                grid-template-columns: 1fr;
                text-align: center;
            }

            .order-item img {
                max-width: 80px;
                height: 80px;
                margin: 0 auto;
            }

            .order-details {
                text-align: center;
            }

            .total-amount {
                text-align: center;
            }

            .track-button {
                width: 100%;
                padding: 0.75rem;
            }
        }

        @media (max-width: 480px) {
            h2 {
                font-size: 1.8rem;
            }

            .order-container {
                padding: 1rem;
            }

            .product-name {
                font-size: 1rem;
            }

            .product-price {
                font-size: 0.95rem;
            }

            .delivery-info {
                font-size: 0.85rem;
            }
        }
    </style>
</head>
<body>
    <%- include('pagecomponent/navbar', { user: user, categories: categories }) %>
    <%- include('pagecomponent/caregorybar', { categories: categories }) %>

    <div class="container">
        <h2>My Orders</h2>
        <div id="orders-container">
            <div class="loader"></div>
        </div>
    </div>

    <%- include('pagecomponent/footer') %>

    <script>
        function checkLoginBeforeAction(actionCallback) {
            fetch('/check-login')
              .then(res => res.json())
              .then (data => {
                if (!data.loggedIn) {
                  // Show login modal or redirect
                  if (document.getElementById('loginModal')) {
                    document.getElementById('loginModal').style.display = 'flex';
                  } else {
                    window.location.href = '/login';
                  }
                  throw new Error('User not logged in');
                }
                actionCallback();
              })
              .catch(err => console.error(err));
        }

        document.addEventListener("DOMContentLoaded", async () => {
            // Check login using session
            const loginCheck = await fetch('/check-login').then(res => res.json());
            if (!loginCheck.loggedIn) {
                if (document.getElementById('loginModal')) {
                    document.getElementById('loginModal').style.display = 'flex';
                } else {
                    window.location.href = '/login';
                }
                return;
            }

            try {
                // Get user profile to fetch userId
                const userResponse = await fetch('/api/users/profile');
                if (!userResponse.ok) {
                    alert('Session expired. Please login again.');
                    window.location.href = '/login';
                    return;
                }
                const userData = await userResponse.json();
                const userId = userData.user._id;

                // Fetch orders using the correct endpoint
                const response = await fetch(`/api/orders/user/${userId}`);
                if (!response.ok) throw new Error('Failed to fetch orders');

                const data = await response.json();
                const ordersContainer = document.getElementById('orders-container');

                if (!data.success || !data.orders || !data.orders.length) {
                    ordersContainer.innerHTML = "<p>No orders found.</p>";
                    return;
                }

                ordersContainer.innerHTML = data.orders.map(order => {
                    try {
                        const orderTotal = order.items ? order.items.reduce((total, item) => {
                            if (!item || !item.product) return total;
                            return total + ((item.product.price || 0) * (item.quantity || 0));
                        }, 0) : 0;

                        // Calculate progress based on order status
                        const statusProgress = {
                            'Order Placed': 25,
                            'Processing': 50,
                            'Shipped': 75,
                            'Delivered': 100
                        };
                        const progress = statusProgress[order.status] || 25;

                        return `
                            <div class="order-container">
                                <p><strong>Order ID:</strong> ${order._id || 'N/A'}</p>
                                <p><strong>Order Date:</strong> ${order.createdAt ? new Date(order.createdAt).toLocaleString() : 'N/A'}</p>
                                <div class="order-status">
                                    Status: ${order.status || 'Order Placed'}
                                    <span>🚚</span>
                                </div>
                                <div class="status-progress">
                                    <div class="status-progress-bar" style="width: ${progress}%"></div>
                                </div>
                                <div class="delivery-info">
                                    <p><strong>Delivery Address:</strong> ${order.address || 'N/A'}</p>
                                    <p><strong>Expected Delivery:</strong> ${order.deliveryDate ? new Date(order.deliveryDate).toLocaleDateString() : 'N/A'}</p>
                                </div>
                                ${order.items ? order.items.map(item => {
                                    if (!item || !item.product) {
                                        return `<div class="error-message">Product information unavailable</div>`;
                                    }
                                    return `
                                        <div class="order-item">
                                            <img src="${item.product.image_uri || '/images/default-image.jpg'}" 
                                                 alt="${item.product.name || 'Product'}"
                                                 onerror="this.src='/images/default-image.jpg'">
                                            <div class="order-details">
                                                <div class="product-name">${item.product.name || 'Product Name Unavailable'}</div>
                                                <div class="product-price">₹${item.product.price || 0} per item</div>
                                                <p>Quantity: ${item.quantity || 0}</p>
                                                <p>Subtotal: ₹${(item.product.price || 0) * (item.quantity || 0)}</p>
                                            </div>
                                            <button class="track-button" onclick="alert('Tracking feature coming soon!')">Track Order</button>
                                        </div>
                                    `;
                                }).join('') : '<div class="error-message">No items found in this order</div>'}
                                <div class="total-amount">Total Amount: ₹${orderTotal}</div>
                            </div>
                        `;
                    } catch (orderError) {
                        console.error("Error processing order:", orderError);
                        return `<div class="error-message">Error displaying order information</div>`;
                    }
                }).join('');
            } catch (error) {
                console.error("Error fetching orders:", error);
                document.getElementById('orders-container').innerHTML = `
                    <div class="error-message">
                        <p>Failed to load orders. Please try refreshing the page or logging in again.</p>
                    </div>
                `;
            }
        });
    </script>
</body>
</html>